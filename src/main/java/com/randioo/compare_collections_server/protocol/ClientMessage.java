// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMessage.proto

package com.randioo.compare_collections_server.protocol;

public final class ClientMessage {
  private ClientMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class CS extends
      com.google.protobuf.GeneratedMessage {
    // Use CS.newBuilder() to construct.
    private CS() {
      initFields();
    }
    private CS(boolean noInit) {}
    
    private static final CS defaultInstance;
    public static CS getDefaultInstance() {
      return defaultInstance;
    }
    
    public CS getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.compare_collections_server.protocol.ClientMessage.internal_static_com_randioo_compare_collections_server_protocol_CS_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.compare_collections_server.protocol.ClientMessage.internal_static_com_randioo_compare_collections_server_protocol_CS_fieldAccessorTable;
    }
    
    // optional .com.randioo.compare_collections_server.protocol.HeartRequest HeartRequest = 1;
    public static final int HEARTREQUEST_FIELD_NUMBER = 1;
    private boolean hasHeartRequest;
    private com.randioo.compare_collections_server.protocol.Heart.HeartRequest heartRequest_;
    public boolean hasHeartRequest() { return hasHeartRequest; }
    public com.randioo.compare_collections_server.protocol.Heart.HeartRequest getHeartRequest() { return heartRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.CSHeart CSHeart = 2;
    public static final int CSHEART_FIELD_NUMBER = 2;
    private boolean hasCSHeart;
    private com.randioo.compare_collections_server.protocol.Heart.CSHeart cSHeart_;
    public boolean hasCSHeart() { return hasCSHeart; }
    public com.randioo.compare_collections_server.protocol.Heart.CSHeart getCSHeart() { return cSHeart_; }
    
    // optional .com.randioo.compare_collections_server.protocol.LoginGetRoleDataRequest LoginGetRoleDataRequest = 3;
    public static final int LOGINGETROLEDATAREQUEST_FIELD_NUMBER = 3;
    private boolean hasLoginGetRoleDataRequest;
    private com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest loginGetRoleDataRequest_;
    public boolean hasLoginGetRoleDataRequest() { return hasLoginGetRoleDataRequest; }
    public com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest getLoginGetRoleDataRequest() { return loginGetRoleDataRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.RoleRenameRequest RoleRenameRequest = 4;
    public static final int ROLERENAMEREQUEST_FIELD_NUMBER = 4;
    private boolean hasRoleRenameRequest;
    private com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest roleRenameRequest_;
    public boolean hasRoleRenameRequest() { return hasRoleRenameRequest; }
    public com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest getRoleRenameRequest() { return roleRenameRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.RoleGetRoleDataRequest RoleGetRoleDataRequest = 5;
    public static final int ROLEGETROLEDATAREQUEST_FIELD_NUMBER = 5;
    private boolean hasRoleGetRoleDataRequest;
    private com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest roleGetRoleDataRequest_;
    public boolean hasRoleGetRoleDataRequest() { return hasRoleGetRoleDataRequest; }
    public com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest getRoleGetRoleDataRequest() { return roleGetRoleDataRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.MatchCreateGameRequest MatchCreateGameRequest = 6;
    public static final int MATCHCREATEGAMEREQUEST_FIELD_NUMBER = 6;
    private boolean hasMatchCreateGameRequest;
    private com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest matchCreateGameRequest_;
    public boolean hasMatchCreateGameRequest() { return hasMatchCreateGameRequest; }
    public com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest getMatchCreateGameRequest() { return matchCreateGameRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.MatchPreJoinRequest MatchPreJoinRequest = 7;
    public static final int MATCHPREJOINREQUEST_FIELD_NUMBER = 7;
    private boolean hasMatchPreJoinRequest;
    private com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest matchPreJoinRequest_;
    public boolean hasMatchPreJoinRequest() { return hasMatchPreJoinRequest; }
    public com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest getMatchPreJoinRequest() { return matchPreJoinRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.MatchJoinGameRequest MatchJoinGameRequest = 8;
    public static final int MATCHJOINGAMEREQUEST_FIELD_NUMBER = 8;
    private boolean hasMatchJoinGameRequest;
    private com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest matchJoinGameRequest_;
    public boolean hasMatchJoinGameRequest() { return hasMatchJoinGameRequest; }
    public com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest getMatchJoinGameRequest() { return matchJoinGameRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.MatchCheckRoomRequest MatchCheckRoomRequest = 9;
    public static final int MATCHCHECKROOMREQUEST_FIELD_NUMBER = 9;
    private boolean hasMatchCheckRoomRequest;
    private com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest matchCheckRoomRequest_;
    public boolean hasMatchCheckRoomRequest() { return hasMatchCheckRoomRequest; }
    public com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest getMatchCheckRoomRequest() { return matchCheckRoomRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.MatchJoinInGameRequest MatchJoinInGameRequest = 10;
    public static final int MATCHJOININGAMEREQUEST_FIELD_NUMBER = 10;
    private boolean hasMatchJoinInGameRequest;
    private com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest matchJoinInGameRequest_;
    public boolean hasMatchJoinInGameRequest() { return hasMatchJoinInGameRequest; }
    public com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest getMatchJoinInGameRequest() { return matchJoinInGameRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.MatchExitGameRequest MatchExitGameRequest = 11;
    public static final int MATCHEXITGAMEREQUEST_FIELD_NUMBER = 11;
    private boolean hasMatchExitGameRequest;
    private com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest matchExitGameRequest_;
    public boolean hasMatchExitGameRequest() { return hasMatchExitGameRequest; }
    public com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest getMatchExitGameRequest() { return matchExitGameRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightReadyRequest FightReadyRequest = 12;
    public static final int FIGHTREADYREQUEST_FIELD_NUMBER = 12;
    private boolean hasFightReadyRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest fightReadyRequest_;
    public boolean hasFightReadyRequest() { return hasFightReadyRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest getFightReadyRequest() { return fightReadyRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightExitGameRequest FightExitGameRequest = 13;
    public static final int FIGHTEXITGAMEREQUEST_FIELD_NUMBER = 13;
    private boolean hasFightExitGameRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest fightExitGameRequest_;
    public boolean hasFightExitGameRequest() { return hasFightExitGameRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest getFightExitGameRequest() { return fightExitGameRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightApplyExitGameRequest FightApplyExitGameRequest = 14;
    public static final int FIGHTAPPLYEXITGAMEREQUEST_FIELD_NUMBER = 14;
    private boolean hasFightApplyExitGameRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest fightApplyExitGameRequest_;
    public boolean hasFightApplyExitGameRequest() { return hasFightApplyExitGameRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest getFightApplyExitGameRequest() { return fightApplyExitGameRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightAgreeExitGameRequest FightAgreeExitGameRequest = 15;
    public static final int FIGHTAGREEEXITGAMEREQUEST_FIELD_NUMBER = 15;
    private boolean hasFightAgreeExitGameRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest fightAgreeExitGameRequest_;
    public boolean hasFightAgreeExitGameRequest() { return hasFightAgreeExitGameRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest getFightAgreeExitGameRequest() { return fightAgreeExitGameRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightSendCardRequest FightSendCardRequest = 16;
    public static final int FIGHTSENDCARDREQUEST_FIELD_NUMBER = 16;
    private boolean hasFightSendCardRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest fightSendCardRequest_;
    public boolean hasFightSendCardRequest() { return hasFightSendCardRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest getFightSendCardRequest() { return fightSendCardRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightGetlastRoundRequest FightGetlastRoundRequest = 17;
    public static final int FIGHTGETLASTROUNDREQUEST_FIELD_NUMBER = 17;
    private boolean hasFightGetlastRoundRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest fightGetlastRoundRequest_;
    public boolean hasFightGetlastRoundRequest() { return hasFightGetlastRoundRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest getFightGetlastRoundRequest() { return fightGetlastRoundRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightGuoRequest FightGuoRequest = 18;
    public static final int FIGHTGUOREQUEST_FIELD_NUMBER = 18;
    private boolean hasFightGuoRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest fightGuoRequest_;
    public boolean hasFightGuoRequest() { return hasFightGuoRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest getFightGuoRequest() { return fightGuoRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightGenRequest FightGenRequest = 19;
    public static final int FIGHTGENREQUEST_FIELD_NUMBER = 19;
    private boolean hasFightGenRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightGenRequest fightGenRequest_;
    public boolean hasFightGenRequest() { return hasFightGenRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightGenRequest getFightGenRequest() { return fightGenRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightBiggerRequest FightBiggerRequest = 20;
    public static final int FIGHTBIGGERREQUEST_FIELD_NUMBER = 20;
    private boolean hasFightBiggerRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest fightBiggerRequest_;
    public boolean hasFightBiggerRequest() { return hasFightBiggerRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest getFightBiggerRequest() { return fightBiggerRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightGiveUpRequest FightGiveUpRequest = 21;
    public static final int FIGHTGIVEUPREQUEST_FIELD_NUMBER = 21;
    private boolean hasFightGiveUpRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest fightGiveUpRequest_;
    public boolean hasFightGiveUpRequest() { return hasFightGiveUpRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest getFightGiveUpRequest() { return fightGiveUpRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightBetAllRequest FightBetAllRequest = 22;
    public static final int FIGHTBETALLREQUEST_FIELD_NUMBER = 22;
    private boolean hasFightBetAllRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest fightBetAllRequest_;
    public boolean hasFightBetAllRequest() { return hasFightBetAllRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest getFightBetAllRequest() { return fightBetAllRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightCutCardsRequest FightCutCardsRequest = 23;
    public static final int FIGHTCUTCARDSREQUEST_FIELD_NUMBER = 23;
    private boolean hasFightCutCardsRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest fightCutCardsRequest_;
    public boolean hasFightCutCardsRequest() { return hasFightCutCardsRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest getFightCutCardsRequest() { return fightCutCardsRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightQueryGameConfigRequest FightQueryGameConfigRequest = 24;
    public static final int FIGHTQUERYGAMECONFIGREQUEST_FIELD_NUMBER = 24;
    private boolean hasFightQueryGameConfigRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest fightQueryGameConfigRequest_;
    public boolean hasFightQueryGameConfigRequest() { return hasFightQueryGameConfigRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest getFightQueryGameConfigRequest() { return fightQueryGameConfigRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightClientDispatchRequest FightClientDispatchRequest = 25;
    public static final int FIGHTCLIENTDISPATCHREQUEST_FIELD_NUMBER = 25;
    private boolean hasFightClientDispatchRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest fightClientDispatchRequest_;
    public boolean hasFightClientDispatchRequest() { return hasFightClientDispatchRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest getFightClientDispatchRequest() { return fightClientDispatchRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightClientTouchCardRequest FightClientTouchCardRequest = 26;
    public static final int FIGHTCLIENTTOUCHCARDREQUEST_FIELD_NUMBER = 26;
    private boolean hasFightClientTouchCardRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest fightClientTouchCardRequest_;
    public boolean hasFightClientTouchCardRequest() { return hasFightClientTouchCardRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest getFightClientTouchCardRequest() { return fightClientTouchCardRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightConfirmGameOverRequest FightConfirmGameOverRequest = 27;
    public static final int FIGHTCONFIRMGAMEOVERREQUEST_FIELD_NUMBER = 27;
    private boolean hasFightConfirmGameOverRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest fightConfirmGameOverRequest_;
    public boolean hasFightConfirmGameOverRequest() { return hasFightConfirmGameOverRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest getFightConfirmGameOverRequest() { return fightConfirmGameOverRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightGameStartRequest FightGameStartRequest = 28;
    public static final int FIGHTGAMESTARTREQUEST_FIELD_NUMBER = 28;
    private boolean hasFightGameStartRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest fightGameStartRequest_;
    public boolean hasFightGameStartRequest() { return hasFightGameStartRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest getFightGameStartRequest() { return fightGameStartRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightBetRequest FightBetRequest = 29;
    public static final int FIGHTBETREQUEST_FIELD_NUMBER = 29;
    private boolean hasFightBetRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightBetRequest fightBetRequest_;
    public boolean hasFightBetRequest() { return hasFightBetRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightBetRequest getFightBetRequest() { return fightBetRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightChooseAddCardRequest FightChooseAddCardRequest = 30;
    public static final int FIGHTCHOOSEADDCARDREQUEST_FIELD_NUMBER = 30;
    private boolean hasFightChooseAddCardRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest fightChooseAddCardRequest_;
    public boolean hasFightChooseAddCardRequest() { return hasFightChooseAddCardRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest getFightChooseAddCardRequest() { return fightChooseAddCardRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightGetRoomDataRequest FightGetRoomDataRequest = 31;
    public static final int FIGHTGETROOMDATAREQUEST_FIELD_NUMBER = 31;
    private boolean hasFightGetRoomDataRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest fightGetRoomDataRequest_;
    public boolean hasFightGetRoomDataRequest() { return hasFightGetRoomDataRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest getFightGetRoomDataRequest() { return fightGetRoomDataRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightLookPaiRequest FightLookPaiRequest = 32;
    public static final int FIGHTLOOKPAIREQUEST_FIELD_NUMBER = 32;
    private boolean hasFightLookPaiRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest fightLookPaiRequest_;
    public boolean hasFightLookPaiRequest() { return hasFightLookPaiRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest getFightLookPaiRequest() { return fightLookPaiRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightTwoRequest FightTwoRequest = 33;
    public static final int FIGHTTWOREQUEST_FIELD_NUMBER = 33;
    private boolean hasFightTwoRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest fightTwoRequest_;
    public boolean hasFightTwoRequest() { return hasFightTwoRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest getFightTwoRequest() { return fightTwoRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.RaceJoinRaceRequest RaceJoinRaceRequest = 34;
    public static final int RACEJOINRACEREQUEST_FIELD_NUMBER = 34;
    private boolean hasRaceJoinRaceRequest;
    private com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest raceJoinRaceRequest_;
    public boolean hasRaceJoinRaceRequest() { return hasRaceJoinRaceRequest; }
    public com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest getRaceJoinRaceRequest() { return raceJoinRaceRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.RaceShowQueueRequest RaceShowQueueRequest = 35;
    public static final int RACESHOWQUEUEREQUEST_FIELD_NUMBER = 35;
    private boolean hasRaceShowQueueRequest;
    private com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest raceShowQueueRequest_;
    public boolean hasRaceShowQueueRequest() { return hasRaceShowQueueRequest; }
    public com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest getRaceShowQueueRequest() { return raceShowQueueRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.GmEnvVarsRequest GmEnvVarsRequest = 36;
    public static final int GMENVVARSREQUEST_FIELD_NUMBER = 36;
    private boolean hasGmEnvVarsRequest;
    private com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest gmEnvVarsRequest_;
    public boolean hasGmEnvVarsRequest() { return hasGmEnvVarsRequest; }
    public com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest getGmEnvVarsRequest() { return gmEnvVarsRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.GmGameInfoRequest GmGameInfoRequest = 37;
    public static final int GMGAMEINFOREQUEST_FIELD_NUMBER = 37;
    private boolean hasGmGameInfoRequest;
    private com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest gmGameInfoRequest_;
    public boolean hasGmGameInfoRequest() { return hasGmGameInfoRequest; }
    public com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest getGmGameInfoRequest() { return gmGameInfoRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.GmDispatchCardRequest GmDispatchCardRequest = 38;
    public static final int GMDISPATCHCARDREQUEST_FIELD_NUMBER = 38;
    private boolean hasGmDispatchCardRequest;
    private com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest gmDispatchCardRequest_;
    public boolean hasGmDispatchCardRequest() { return hasGmDispatchCardRequest; }
    public com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest getGmDispatchCardRequest() { return gmDispatchCardRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.GmRoundRequest GmRoundRequest = 39;
    public static final int GMROUNDREQUEST_FIELD_NUMBER = 39;
    private boolean hasGmRoundRequest;
    private com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest gmRoundRequest_;
    public boolean hasGmRoundRequest() { return hasGmRoundRequest; }
    public com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest getGmRoundRequest() { return gmRoundRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.FightReconnectDataRequest FightReconnectDataRequest = 40;
    public static final int FIGHTRECONNECTDATAREQUEST_FIELD_NUMBER = 40;
    private boolean hasFightReconnectDataRequest;
    private com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest fightReconnectDataRequest_;
    public boolean hasFightReconnectDataRequest() { return hasFightReconnectDataRequest; }
    public com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest getFightReconnectDataRequest() { return fightReconnectDataRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.MatchRequest MatchRequest = 41;
    public static final int MATCHREQUEST_FIELD_NUMBER = 41;
    private boolean hasMatchRequest;
    private com.randioo.compare_collections_server.protocol.Match.MatchRequest matchRequest_;
    public boolean hasMatchRequest() { return hasMatchRequest; }
    public com.randioo.compare_collections_server.protocol.Match.MatchRequest getMatchRequest() { return matchRequest_; }
    
    // optional .com.randioo.compare_collections_server.protocol.MatchCancelRequest MatchCancelRequest = 42;
    public static final int MATCHCANCELREQUEST_FIELD_NUMBER = 42;
    private boolean hasMatchCancelRequest;
    private com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest matchCancelRequest_;
    public boolean hasMatchCancelRequest() { return hasMatchCancelRequest; }
    public com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest getMatchCancelRequest() { return matchCancelRequest_; }
    
    private void initFields() {
      heartRequest_ = com.randioo.compare_collections_server.protocol.Heart.HeartRequest.getDefaultInstance();
      cSHeart_ = com.randioo.compare_collections_server.protocol.Heart.CSHeart.getDefaultInstance();
      loginGetRoleDataRequest_ = com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest.getDefaultInstance();
      roleRenameRequest_ = com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest.getDefaultInstance();
      roleGetRoleDataRequest_ = com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest.getDefaultInstance();
      matchCreateGameRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest.getDefaultInstance();
      matchPreJoinRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest.getDefaultInstance();
      matchJoinGameRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest.getDefaultInstance();
      matchCheckRoomRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest.getDefaultInstance();
      matchJoinInGameRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest.getDefaultInstance();
      matchExitGameRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest.getDefaultInstance();
      fightReadyRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest.getDefaultInstance();
      fightExitGameRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest.getDefaultInstance();
      fightApplyExitGameRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest.getDefaultInstance();
      fightAgreeExitGameRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest.getDefaultInstance();
      fightSendCardRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest.getDefaultInstance();
      fightGetlastRoundRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest.getDefaultInstance();
      fightGuoRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest.getDefaultInstance();
      fightGenRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGenRequest.getDefaultInstance();
      fightBiggerRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest.getDefaultInstance();
      fightGiveUpRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest.getDefaultInstance();
      fightBetAllRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest.getDefaultInstance();
      fightCutCardsRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest.getDefaultInstance();
      fightQueryGameConfigRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest.getDefaultInstance();
      fightClientDispatchRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest.getDefaultInstance();
      fightClientTouchCardRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest.getDefaultInstance();
      fightConfirmGameOverRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest.getDefaultInstance();
      fightGameStartRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest.getDefaultInstance();
      fightBetRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightBetRequest.getDefaultInstance();
      fightChooseAddCardRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest.getDefaultInstance();
      fightGetRoomDataRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest.getDefaultInstance();
      fightLookPaiRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest.getDefaultInstance();
      fightTwoRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest.getDefaultInstance();
      raceJoinRaceRequest_ = com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest.getDefaultInstance();
      raceShowQueueRequest_ = com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest.getDefaultInstance();
      gmEnvVarsRequest_ = com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest.getDefaultInstance();
      gmGameInfoRequest_ = com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest.getDefaultInstance();
      gmDispatchCardRequest_ = com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest.getDefaultInstance();
      gmRoundRequest_ = com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest.getDefaultInstance();
      fightReconnectDataRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest.getDefaultInstance();
      matchRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchRequest.getDefaultInstance();
      matchCancelRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasHeartRequest()) {
        output.writeMessage(1, getHeartRequest());
      }
      if (hasCSHeart()) {
        output.writeMessage(2, getCSHeart());
      }
      if (hasLoginGetRoleDataRequest()) {
        output.writeMessage(3, getLoginGetRoleDataRequest());
      }
      if (hasRoleRenameRequest()) {
        output.writeMessage(4, getRoleRenameRequest());
      }
      if (hasRoleGetRoleDataRequest()) {
        output.writeMessage(5, getRoleGetRoleDataRequest());
      }
      if (hasMatchCreateGameRequest()) {
        output.writeMessage(6, getMatchCreateGameRequest());
      }
      if (hasMatchPreJoinRequest()) {
        output.writeMessage(7, getMatchPreJoinRequest());
      }
      if (hasMatchJoinGameRequest()) {
        output.writeMessage(8, getMatchJoinGameRequest());
      }
      if (hasMatchCheckRoomRequest()) {
        output.writeMessage(9, getMatchCheckRoomRequest());
      }
      if (hasMatchJoinInGameRequest()) {
        output.writeMessage(10, getMatchJoinInGameRequest());
      }
      if (hasMatchExitGameRequest()) {
        output.writeMessage(11, getMatchExitGameRequest());
      }
      if (hasFightReadyRequest()) {
        output.writeMessage(12, getFightReadyRequest());
      }
      if (hasFightExitGameRequest()) {
        output.writeMessage(13, getFightExitGameRequest());
      }
      if (hasFightApplyExitGameRequest()) {
        output.writeMessage(14, getFightApplyExitGameRequest());
      }
      if (hasFightAgreeExitGameRequest()) {
        output.writeMessage(15, getFightAgreeExitGameRequest());
      }
      if (hasFightSendCardRequest()) {
        output.writeMessage(16, getFightSendCardRequest());
      }
      if (hasFightGetlastRoundRequest()) {
        output.writeMessage(17, getFightGetlastRoundRequest());
      }
      if (hasFightGuoRequest()) {
        output.writeMessage(18, getFightGuoRequest());
      }
      if (hasFightGenRequest()) {
        output.writeMessage(19, getFightGenRequest());
      }
      if (hasFightBiggerRequest()) {
        output.writeMessage(20, getFightBiggerRequest());
      }
      if (hasFightGiveUpRequest()) {
        output.writeMessage(21, getFightGiveUpRequest());
      }
      if (hasFightBetAllRequest()) {
        output.writeMessage(22, getFightBetAllRequest());
      }
      if (hasFightCutCardsRequest()) {
        output.writeMessage(23, getFightCutCardsRequest());
      }
      if (hasFightQueryGameConfigRequest()) {
        output.writeMessage(24, getFightQueryGameConfigRequest());
      }
      if (hasFightClientDispatchRequest()) {
        output.writeMessage(25, getFightClientDispatchRequest());
      }
      if (hasFightClientTouchCardRequest()) {
        output.writeMessage(26, getFightClientTouchCardRequest());
      }
      if (hasFightConfirmGameOverRequest()) {
        output.writeMessage(27, getFightConfirmGameOverRequest());
      }
      if (hasFightGameStartRequest()) {
        output.writeMessage(28, getFightGameStartRequest());
      }
      if (hasFightBetRequest()) {
        output.writeMessage(29, getFightBetRequest());
      }
      if (hasFightChooseAddCardRequest()) {
        output.writeMessage(30, getFightChooseAddCardRequest());
      }
      if (hasFightGetRoomDataRequest()) {
        output.writeMessage(31, getFightGetRoomDataRequest());
      }
      if (hasFightLookPaiRequest()) {
        output.writeMessage(32, getFightLookPaiRequest());
      }
      if (hasFightTwoRequest()) {
        output.writeMessage(33, getFightTwoRequest());
      }
      if (hasRaceJoinRaceRequest()) {
        output.writeMessage(34, getRaceJoinRaceRequest());
      }
      if (hasRaceShowQueueRequest()) {
        output.writeMessage(35, getRaceShowQueueRequest());
      }
      if (hasGmEnvVarsRequest()) {
        output.writeMessage(36, getGmEnvVarsRequest());
      }
      if (hasGmGameInfoRequest()) {
        output.writeMessage(37, getGmGameInfoRequest());
      }
      if (hasGmDispatchCardRequest()) {
        output.writeMessage(38, getGmDispatchCardRequest());
      }
      if (hasGmRoundRequest()) {
        output.writeMessage(39, getGmRoundRequest());
      }
      if (hasFightReconnectDataRequest()) {
        output.writeMessage(40, getFightReconnectDataRequest());
      }
      if (hasMatchRequest()) {
        output.writeMessage(41, getMatchRequest());
      }
      if (hasMatchCancelRequest()) {
        output.writeMessage(42, getMatchCancelRequest());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasHeartRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeartRequest());
      }
      if (hasCSHeart()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCSHeart());
      }
      if (hasLoginGetRoleDataRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLoginGetRoleDataRequest());
      }
      if (hasRoleRenameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getRoleRenameRequest());
      }
      if (hasRoleGetRoleDataRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getRoleGetRoleDataRequest());
      }
      if (hasMatchCreateGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getMatchCreateGameRequest());
      }
      if (hasMatchPreJoinRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getMatchPreJoinRequest());
      }
      if (hasMatchJoinGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getMatchJoinGameRequest());
      }
      if (hasMatchCheckRoomRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getMatchCheckRoomRequest());
      }
      if (hasMatchJoinInGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getMatchJoinInGameRequest());
      }
      if (hasMatchExitGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getMatchExitGameRequest());
      }
      if (hasFightReadyRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getFightReadyRequest());
      }
      if (hasFightExitGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getFightExitGameRequest());
      }
      if (hasFightApplyExitGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getFightApplyExitGameRequest());
      }
      if (hasFightAgreeExitGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getFightAgreeExitGameRequest());
      }
      if (hasFightSendCardRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getFightSendCardRequest());
      }
      if (hasFightGetlastRoundRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getFightGetlastRoundRequest());
      }
      if (hasFightGuoRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getFightGuoRequest());
      }
      if (hasFightGenRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, getFightGenRequest());
      }
      if (hasFightBiggerRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, getFightBiggerRequest());
      }
      if (hasFightGiveUpRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getFightGiveUpRequest());
      }
      if (hasFightBetAllRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, getFightBetAllRequest());
      }
      if (hasFightCutCardsRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, getFightCutCardsRequest());
      }
      if (hasFightQueryGameConfigRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getFightQueryGameConfigRequest());
      }
      if (hasFightClientDispatchRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getFightClientDispatchRequest());
      }
      if (hasFightClientTouchCardRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, getFightClientTouchCardRequest());
      }
      if (hasFightConfirmGameOverRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, getFightConfirmGameOverRequest());
      }
      if (hasFightGameStartRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, getFightGameStartRequest());
      }
      if (hasFightBetRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, getFightBetRequest());
      }
      if (hasFightChooseAddCardRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, getFightChooseAddCardRequest());
      }
      if (hasFightGetRoomDataRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, getFightGetRoomDataRequest());
      }
      if (hasFightLookPaiRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, getFightLookPaiRequest());
      }
      if (hasFightTwoRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, getFightTwoRequest());
      }
      if (hasRaceJoinRaceRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, getRaceJoinRaceRequest());
      }
      if (hasRaceShowQueueRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, getRaceShowQueueRequest());
      }
      if (hasGmEnvVarsRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, getGmEnvVarsRequest());
      }
      if (hasGmGameInfoRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, getGmGameInfoRequest());
      }
      if (hasGmDispatchCardRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, getGmDispatchCardRequest());
      }
      if (hasGmRoundRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, getGmRoundRequest());
      }
      if (hasFightReconnectDataRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, getFightReconnectDataRequest());
      }
      if (hasMatchRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, getMatchRequest());
      }
      if (hasMatchCancelRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(42, getMatchCancelRequest());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.compare_collections_server.protocol.ClientMessage.CS parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.compare_collections_server.protocol.ClientMessage.CS prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.compare_collections_server.protocol.ClientMessage.CS result;
      
      // Construct using com.randioo.compare_collections_server.protocol.ClientMessage.CS.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.compare_collections_server.protocol.ClientMessage.CS();
        return builder;
      }
      
      protected com.randioo.compare_collections_server.protocol.ClientMessage.CS internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.compare_collections_server.protocol.ClientMessage.CS();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.compare_collections_server.protocol.ClientMessage.CS.getDescriptor();
      }
      
      public com.randioo.compare_collections_server.protocol.ClientMessage.CS getDefaultInstanceForType() {
        return com.randioo.compare_collections_server.protocol.ClientMessage.CS.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.compare_collections_server.protocol.ClientMessage.CS build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.compare_collections_server.protocol.ClientMessage.CS buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.compare_collections_server.protocol.ClientMessage.CS buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.compare_collections_server.protocol.ClientMessage.CS returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.compare_collections_server.protocol.ClientMessage.CS) {
          return mergeFrom((com.randioo.compare_collections_server.protocol.ClientMessage.CS)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.compare_collections_server.protocol.ClientMessage.CS other) {
        if (other == com.randioo.compare_collections_server.protocol.ClientMessage.CS.getDefaultInstance()) return this;
        if (other.hasHeartRequest()) {
          mergeHeartRequest(other.getHeartRequest());
        }
        if (other.hasCSHeart()) {
          mergeCSHeart(other.getCSHeart());
        }
        if (other.hasLoginGetRoleDataRequest()) {
          mergeLoginGetRoleDataRequest(other.getLoginGetRoleDataRequest());
        }
        if (other.hasRoleRenameRequest()) {
          mergeRoleRenameRequest(other.getRoleRenameRequest());
        }
        if (other.hasRoleGetRoleDataRequest()) {
          mergeRoleGetRoleDataRequest(other.getRoleGetRoleDataRequest());
        }
        if (other.hasMatchCreateGameRequest()) {
          mergeMatchCreateGameRequest(other.getMatchCreateGameRequest());
        }
        if (other.hasMatchPreJoinRequest()) {
          mergeMatchPreJoinRequest(other.getMatchPreJoinRequest());
        }
        if (other.hasMatchJoinGameRequest()) {
          mergeMatchJoinGameRequest(other.getMatchJoinGameRequest());
        }
        if (other.hasMatchCheckRoomRequest()) {
          mergeMatchCheckRoomRequest(other.getMatchCheckRoomRequest());
        }
        if (other.hasMatchJoinInGameRequest()) {
          mergeMatchJoinInGameRequest(other.getMatchJoinInGameRequest());
        }
        if (other.hasMatchExitGameRequest()) {
          mergeMatchExitGameRequest(other.getMatchExitGameRequest());
        }
        if (other.hasFightReadyRequest()) {
          mergeFightReadyRequest(other.getFightReadyRequest());
        }
        if (other.hasFightExitGameRequest()) {
          mergeFightExitGameRequest(other.getFightExitGameRequest());
        }
        if (other.hasFightApplyExitGameRequest()) {
          mergeFightApplyExitGameRequest(other.getFightApplyExitGameRequest());
        }
        if (other.hasFightAgreeExitGameRequest()) {
          mergeFightAgreeExitGameRequest(other.getFightAgreeExitGameRequest());
        }
        if (other.hasFightSendCardRequest()) {
          mergeFightSendCardRequest(other.getFightSendCardRequest());
        }
        if (other.hasFightGetlastRoundRequest()) {
          mergeFightGetlastRoundRequest(other.getFightGetlastRoundRequest());
        }
        if (other.hasFightGuoRequest()) {
          mergeFightGuoRequest(other.getFightGuoRequest());
        }
        if (other.hasFightGenRequest()) {
          mergeFightGenRequest(other.getFightGenRequest());
        }
        if (other.hasFightBiggerRequest()) {
          mergeFightBiggerRequest(other.getFightBiggerRequest());
        }
        if (other.hasFightGiveUpRequest()) {
          mergeFightGiveUpRequest(other.getFightGiveUpRequest());
        }
        if (other.hasFightBetAllRequest()) {
          mergeFightBetAllRequest(other.getFightBetAllRequest());
        }
        if (other.hasFightCutCardsRequest()) {
          mergeFightCutCardsRequest(other.getFightCutCardsRequest());
        }
        if (other.hasFightQueryGameConfigRequest()) {
          mergeFightQueryGameConfigRequest(other.getFightQueryGameConfigRequest());
        }
        if (other.hasFightClientDispatchRequest()) {
          mergeFightClientDispatchRequest(other.getFightClientDispatchRequest());
        }
        if (other.hasFightClientTouchCardRequest()) {
          mergeFightClientTouchCardRequest(other.getFightClientTouchCardRequest());
        }
        if (other.hasFightConfirmGameOverRequest()) {
          mergeFightConfirmGameOverRequest(other.getFightConfirmGameOverRequest());
        }
        if (other.hasFightGameStartRequest()) {
          mergeFightGameStartRequest(other.getFightGameStartRequest());
        }
        if (other.hasFightBetRequest()) {
          mergeFightBetRequest(other.getFightBetRequest());
        }
        if (other.hasFightChooseAddCardRequest()) {
          mergeFightChooseAddCardRequest(other.getFightChooseAddCardRequest());
        }
        if (other.hasFightGetRoomDataRequest()) {
          mergeFightGetRoomDataRequest(other.getFightGetRoomDataRequest());
        }
        if (other.hasFightLookPaiRequest()) {
          mergeFightLookPaiRequest(other.getFightLookPaiRequest());
        }
        if (other.hasFightTwoRequest()) {
          mergeFightTwoRequest(other.getFightTwoRequest());
        }
        if (other.hasRaceJoinRaceRequest()) {
          mergeRaceJoinRaceRequest(other.getRaceJoinRaceRequest());
        }
        if (other.hasRaceShowQueueRequest()) {
          mergeRaceShowQueueRequest(other.getRaceShowQueueRequest());
        }
        if (other.hasGmEnvVarsRequest()) {
          mergeGmEnvVarsRequest(other.getGmEnvVarsRequest());
        }
        if (other.hasGmGameInfoRequest()) {
          mergeGmGameInfoRequest(other.getGmGameInfoRequest());
        }
        if (other.hasGmDispatchCardRequest()) {
          mergeGmDispatchCardRequest(other.getGmDispatchCardRequest());
        }
        if (other.hasGmRoundRequest()) {
          mergeGmRoundRequest(other.getGmRoundRequest());
        }
        if (other.hasFightReconnectDataRequest()) {
          mergeFightReconnectDataRequest(other.getFightReconnectDataRequest());
        }
        if (other.hasMatchRequest()) {
          mergeMatchRequest(other.getMatchRequest());
        }
        if (other.hasMatchCancelRequest()) {
          mergeMatchCancelRequest(other.getMatchCancelRequest());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.compare_collections_server.protocol.Heart.HeartRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Heart.HeartRequest.newBuilder();
              if (hasHeartRequest()) {
                subBuilder.mergeFrom(getHeartRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeartRequest(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.randioo.compare_collections_server.protocol.Heart.CSHeart.Builder subBuilder = com.randioo.compare_collections_server.protocol.Heart.CSHeart.newBuilder();
              if (hasCSHeart()) {
                subBuilder.mergeFrom(getCSHeart());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCSHeart(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest.newBuilder();
              if (hasLoginGetRoleDataRequest()) {
                subBuilder.mergeFrom(getLoginGetRoleDataRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLoginGetRoleDataRequest(subBuilder.buildPartial());
              break;
            }
            case 34: {
              com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest.newBuilder();
              if (hasRoleRenameRequest()) {
                subBuilder.mergeFrom(getRoleRenameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoleRenameRequest(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest.newBuilder();
              if (hasRoleGetRoleDataRequest()) {
                subBuilder.mergeFrom(getRoleGetRoleDataRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoleGetRoleDataRequest(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest.newBuilder();
              if (hasMatchCreateGameRequest()) {
                subBuilder.mergeFrom(getMatchCreateGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchCreateGameRequest(subBuilder.buildPartial());
              break;
            }
            case 58: {
              com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest.newBuilder();
              if (hasMatchPreJoinRequest()) {
                subBuilder.mergeFrom(getMatchPreJoinRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchPreJoinRequest(subBuilder.buildPartial());
              break;
            }
            case 66: {
              com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest.newBuilder();
              if (hasMatchJoinGameRequest()) {
                subBuilder.mergeFrom(getMatchJoinGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchJoinGameRequest(subBuilder.buildPartial());
              break;
            }
            case 74: {
              com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest.newBuilder();
              if (hasMatchCheckRoomRequest()) {
                subBuilder.mergeFrom(getMatchCheckRoomRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchCheckRoomRequest(subBuilder.buildPartial());
              break;
            }
            case 82: {
              com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest.newBuilder();
              if (hasMatchJoinInGameRequest()) {
                subBuilder.mergeFrom(getMatchJoinInGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchJoinInGameRequest(subBuilder.buildPartial());
              break;
            }
            case 90: {
              com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest.newBuilder();
              if (hasMatchExitGameRequest()) {
                subBuilder.mergeFrom(getMatchExitGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchExitGameRequest(subBuilder.buildPartial());
              break;
            }
            case 98: {
              com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest.newBuilder();
              if (hasFightReadyRequest()) {
                subBuilder.mergeFrom(getFightReadyRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightReadyRequest(subBuilder.buildPartial());
              break;
            }
            case 106: {
              com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest.newBuilder();
              if (hasFightExitGameRequest()) {
                subBuilder.mergeFrom(getFightExitGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightExitGameRequest(subBuilder.buildPartial());
              break;
            }
            case 114: {
              com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest.newBuilder();
              if (hasFightApplyExitGameRequest()) {
                subBuilder.mergeFrom(getFightApplyExitGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightApplyExitGameRequest(subBuilder.buildPartial());
              break;
            }
            case 122: {
              com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest.newBuilder();
              if (hasFightAgreeExitGameRequest()) {
                subBuilder.mergeFrom(getFightAgreeExitGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightAgreeExitGameRequest(subBuilder.buildPartial());
              break;
            }
            case 130: {
              com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest.newBuilder();
              if (hasFightSendCardRequest()) {
                subBuilder.mergeFrom(getFightSendCardRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightSendCardRequest(subBuilder.buildPartial());
              break;
            }
            case 138: {
              com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest.newBuilder();
              if (hasFightGetlastRoundRequest()) {
                subBuilder.mergeFrom(getFightGetlastRoundRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGetlastRoundRequest(subBuilder.buildPartial());
              break;
            }
            case 146: {
              com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest.newBuilder();
              if (hasFightGuoRequest()) {
                subBuilder.mergeFrom(getFightGuoRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGuoRequest(subBuilder.buildPartial());
              break;
            }
            case 154: {
              com.randioo.compare_collections_server.protocol.Fight.FightGenRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightGenRequest.newBuilder();
              if (hasFightGenRequest()) {
                subBuilder.mergeFrom(getFightGenRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGenRequest(subBuilder.buildPartial());
              break;
            }
            case 162: {
              com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest.newBuilder();
              if (hasFightBiggerRequest()) {
                subBuilder.mergeFrom(getFightBiggerRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightBiggerRequest(subBuilder.buildPartial());
              break;
            }
            case 170: {
              com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest.newBuilder();
              if (hasFightGiveUpRequest()) {
                subBuilder.mergeFrom(getFightGiveUpRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGiveUpRequest(subBuilder.buildPartial());
              break;
            }
            case 178: {
              com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest.newBuilder();
              if (hasFightBetAllRequest()) {
                subBuilder.mergeFrom(getFightBetAllRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightBetAllRequest(subBuilder.buildPartial());
              break;
            }
            case 186: {
              com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest.newBuilder();
              if (hasFightCutCardsRequest()) {
                subBuilder.mergeFrom(getFightCutCardsRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightCutCardsRequest(subBuilder.buildPartial());
              break;
            }
            case 194: {
              com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest.newBuilder();
              if (hasFightQueryGameConfigRequest()) {
                subBuilder.mergeFrom(getFightQueryGameConfigRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightQueryGameConfigRequest(subBuilder.buildPartial());
              break;
            }
            case 202: {
              com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest.newBuilder();
              if (hasFightClientDispatchRequest()) {
                subBuilder.mergeFrom(getFightClientDispatchRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightClientDispatchRequest(subBuilder.buildPartial());
              break;
            }
            case 210: {
              com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest.newBuilder();
              if (hasFightClientTouchCardRequest()) {
                subBuilder.mergeFrom(getFightClientTouchCardRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightClientTouchCardRequest(subBuilder.buildPartial());
              break;
            }
            case 218: {
              com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest.newBuilder();
              if (hasFightConfirmGameOverRequest()) {
                subBuilder.mergeFrom(getFightConfirmGameOverRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightConfirmGameOverRequest(subBuilder.buildPartial());
              break;
            }
            case 226: {
              com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest.newBuilder();
              if (hasFightGameStartRequest()) {
                subBuilder.mergeFrom(getFightGameStartRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGameStartRequest(subBuilder.buildPartial());
              break;
            }
            case 234: {
              com.randioo.compare_collections_server.protocol.Fight.FightBetRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightBetRequest.newBuilder();
              if (hasFightBetRequest()) {
                subBuilder.mergeFrom(getFightBetRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightBetRequest(subBuilder.buildPartial());
              break;
            }
            case 242: {
              com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest.newBuilder();
              if (hasFightChooseAddCardRequest()) {
                subBuilder.mergeFrom(getFightChooseAddCardRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightChooseAddCardRequest(subBuilder.buildPartial());
              break;
            }
            case 250: {
              com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest.newBuilder();
              if (hasFightGetRoomDataRequest()) {
                subBuilder.mergeFrom(getFightGetRoomDataRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGetRoomDataRequest(subBuilder.buildPartial());
              break;
            }
            case 258: {
              com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest.newBuilder();
              if (hasFightLookPaiRequest()) {
                subBuilder.mergeFrom(getFightLookPaiRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightLookPaiRequest(subBuilder.buildPartial());
              break;
            }
            case 266: {
              com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest.newBuilder();
              if (hasFightTwoRequest()) {
                subBuilder.mergeFrom(getFightTwoRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightTwoRequest(subBuilder.buildPartial());
              break;
            }
            case 274: {
              com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest.newBuilder();
              if (hasRaceJoinRaceRequest()) {
                subBuilder.mergeFrom(getRaceJoinRaceRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRaceJoinRaceRequest(subBuilder.buildPartial());
              break;
            }
            case 282: {
              com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest.newBuilder();
              if (hasRaceShowQueueRequest()) {
                subBuilder.mergeFrom(getRaceShowQueueRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRaceShowQueueRequest(subBuilder.buildPartial());
              break;
            }
            case 290: {
              com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest.newBuilder();
              if (hasGmEnvVarsRequest()) {
                subBuilder.mergeFrom(getGmEnvVarsRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGmEnvVarsRequest(subBuilder.buildPartial());
              break;
            }
            case 298: {
              com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest.newBuilder();
              if (hasGmGameInfoRequest()) {
                subBuilder.mergeFrom(getGmGameInfoRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGmGameInfoRequest(subBuilder.buildPartial());
              break;
            }
            case 306: {
              com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest.newBuilder();
              if (hasGmDispatchCardRequest()) {
                subBuilder.mergeFrom(getGmDispatchCardRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGmDispatchCardRequest(subBuilder.buildPartial());
              break;
            }
            case 314: {
              com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest.newBuilder();
              if (hasGmRoundRequest()) {
                subBuilder.mergeFrom(getGmRoundRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGmRoundRequest(subBuilder.buildPartial());
              break;
            }
            case 322: {
              com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest.newBuilder();
              if (hasFightReconnectDataRequest()) {
                subBuilder.mergeFrom(getFightReconnectDataRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightReconnectDataRequest(subBuilder.buildPartial());
              break;
            }
            case 330: {
              com.randioo.compare_collections_server.protocol.Match.MatchRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Match.MatchRequest.newBuilder();
              if (hasMatchRequest()) {
                subBuilder.mergeFrom(getMatchRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchRequest(subBuilder.buildPartial());
              break;
            }
            case 338: {
              com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest.Builder subBuilder = com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest.newBuilder();
              if (hasMatchCancelRequest()) {
                subBuilder.mergeFrom(getMatchCancelRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchCancelRequest(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .com.randioo.compare_collections_server.protocol.HeartRequest HeartRequest = 1;
      public boolean hasHeartRequest() {
        return result.hasHeartRequest();
      }
      public com.randioo.compare_collections_server.protocol.Heart.HeartRequest getHeartRequest() {
        return result.getHeartRequest();
      }
      public Builder setHeartRequest(com.randioo.compare_collections_server.protocol.Heart.HeartRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHeartRequest = true;
        result.heartRequest_ = value;
        return this;
      }
      public Builder setHeartRequest(com.randioo.compare_collections_server.protocol.Heart.HeartRequest.Builder builderForValue) {
        result.hasHeartRequest = true;
        result.heartRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeHeartRequest(com.randioo.compare_collections_server.protocol.Heart.HeartRequest value) {
        if (result.hasHeartRequest() &&
            result.heartRequest_ != com.randioo.compare_collections_server.protocol.Heart.HeartRequest.getDefaultInstance()) {
          result.heartRequest_ =
            com.randioo.compare_collections_server.protocol.Heart.HeartRequest.newBuilder(result.heartRequest_).mergeFrom(value).buildPartial();
        } else {
          result.heartRequest_ = value;
        }
        result.hasHeartRequest = true;
        return this;
      }
      public Builder clearHeartRequest() {
        result.hasHeartRequest = false;
        result.heartRequest_ = com.randioo.compare_collections_server.protocol.Heart.HeartRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.CSHeart CSHeart = 2;
      public boolean hasCSHeart() {
        return result.hasCSHeart();
      }
      public com.randioo.compare_collections_server.protocol.Heart.CSHeart getCSHeart() {
        return result.getCSHeart();
      }
      public Builder setCSHeart(com.randioo.compare_collections_server.protocol.Heart.CSHeart value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCSHeart = true;
        result.cSHeart_ = value;
        return this;
      }
      public Builder setCSHeart(com.randioo.compare_collections_server.protocol.Heart.CSHeart.Builder builderForValue) {
        result.hasCSHeart = true;
        result.cSHeart_ = builderForValue.build();
        return this;
      }
      public Builder mergeCSHeart(com.randioo.compare_collections_server.protocol.Heart.CSHeart value) {
        if (result.hasCSHeart() &&
            result.cSHeart_ != com.randioo.compare_collections_server.protocol.Heart.CSHeart.getDefaultInstance()) {
          result.cSHeart_ =
            com.randioo.compare_collections_server.protocol.Heart.CSHeart.newBuilder(result.cSHeart_).mergeFrom(value).buildPartial();
        } else {
          result.cSHeart_ = value;
        }
        result.hasCSHeart = true;
        return this;
      }
      public Builder clearCSHeart() {
        result.hasCSHeart = false;
        result.cSHeart_ = com.randioo.compare_collections_server.protocol.Heart.CSHeart.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.LoginGetRoleDataRequest LoginGetRoleDataRequest = 3;
      public boolean hasLoginGetRoleDataRequest() {
        return result.hasLoginGetRoleDataRequest();
      }
      public com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest getLoginGetRoleDataRequest() {
        return result.getLoginGetRoleDataRequest();
      }
      public Builder setLoginGetRoleDataRequest(com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLoginGetRoleDataRequest = true;
        result.loginGetRoleDataRequest_ = value;
        return this;
      }
      public Builder setLoginGetRoleDataRequest(com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest.Builder builderForValue) {
        result.hasLoginGetRoleDataRequest = true;
        result.loginGetRoleDataRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeLoginGetRoleDataRequest(com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest value) {
        if (result.hasLoginGetRoleDataRequest() &&
            result.loginGetRoleDataRequest_ != com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest.getDefaultInstance()) {
          result.loginGetRoleDataRequest_ =
            com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest.newBuilder(result.loginGetRoleDataRequest_).mergeFrom(value).buildPartial();
        } else {
          result.loginGetRoleDataRequest_ = value;
        }
        result.hasLoginGetRoleDataRequest = true;
        return this;
      }
      public Builder clearLoginGetRoleDataRequest() {
        result.hasLoginGetRoleDataRequest = false;
        result.loginGetRoleDataRequest_ = com.randioo.compare_collections_server.protocol.Login.LoginGetRoleDataRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.RoleRenameRequest RoleRenameRequest = 4;
      public boolean hasRoleRenameRequest() {
        return result.hasRoleRenameRequest();
      }
      public com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest getRoleRenameRequest() {
        return result.getRoleRenameRequest();
      }
      public Builder setRoleRenameRequest(com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRoleRenameRequest = true;
        result.roleRenameRequest_ = value;
        return this;
      }
      public Builder setRoleRenameRequest(com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest.Builder builderForValue) {
        result.hasRoleRenameRequest = true;
        result.roleRenameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeRoleRenameRequest(com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest value) {
        if (result.hasRoleRenameRequest() &&
            result.roleRenameRequest_ != com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest.getDefaultInstance()) {
          result.roleRenameRequest_ =
            com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest.newBuilder(result.roleRenameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.roleRenameRequest_ = value;
        }
        result.hasRoleRenameRequest = true;
        return this;
      }
      public Builder clearRoleRenameRequest() {
        result.hasRoleRenameRequest = false;
        result.roleRenameRequest_ = com.randioo.compare_collections_server.protocol.Role.RoleRenameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.RoleGetRoleDataRequest RoleGetRoleDataRequest = 5;
      public boolean hasRoleGetRoleDataRequest() {
        return result.hasRoleGetRoleDataRequest();
      }
      public com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest getRoleGetRoleDataRequest() {
        return result.getRoleGetRoleDataRequest();
      }
      public Builder setRoleGetRoleDataRequest(com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRoleGetRoleDataRequest = true;
        result.roleGetRoleDataRequest_ = value;
        return this;
      }
      public Builder setRoleGetRoleDataRequest(com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest.Builder builderForValue) {
        result.hasRoleGetRoleDataRequest = true;
        result.roleGetRoleDataRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeRoleGetRoleDataRequest(com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest value) {
        if (result.hasRoleGetRoleDataRequest() &&
            result.roleGetRoleDataRequest_ != com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest.getDefaultInstance()) {
          result.roleGetRoleDataRequest_ =
            com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest.newBuilder(result.roleGetRoleDataRequest_).mergeFrom(value).buildPartial();
        } else {
          result.roleGetRoleDataRequest_ = value;
        }
        result.hasRoleGetRoleDataRequest = true;
        return this;
      }
      public Builder clearRoleGetRoleDataRequest() {
        result.hasRoleGetRoleDataRequest = false;
        result.roleGetRoleDataRequest_ = com.randioo.compare_collections_server.protocol.Role.RoleGetRoleDataRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.MatchCreateGameRequest MatchCreateGameRequest = 6;
      public boolean hasMatchCreateGameRequest() {
        return result.hasMatchCreateGameRequest();
      }
      public com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest getMatchCreateGameRequest() {
        return result.getMatchCreateGameRequest();
      }
      public Builder setMatchCreateGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchCreateGameRequest = true;
        result.matchCreateGameRequest_ = value;
        return this;
      }
      public Builder setMatchCreateGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest.Builder builderForValue) {
        result.hasMatchCreateGameRequest = true;
        result.matchCreateGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchCreateGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest value) {
        if (result.hasMatchCreateGameRequest() &&
            result.matchCreateGameRequest_ != com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest.getDefaultInstance()) {
          result.matchCreateGameRequest_ =
            com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest.newBuilder(result.matchCreateGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchCreateGameRequest_ = value;
        }
        result.hasMatchCreateGameRequest = true;
        return this;
      }
      public Builder clearMatchCreateGameRequest() {
        result.hasMatchCreateGameRequest = false;
        result.matchCreateGameRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchCreateGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.MatchPreJoinRequest MatchPreJoinRequest = 7;
      public boolean hasMatchPreJoinRequest() {
        return result.hasMatchPreJoinRequest();
      }
      public com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest getMatchPreJoinRequest() {
        return result.getMatchPreJoinRequest();
      }
      public Builder setMatchPreJoinRequest(com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchPreJoinRequest = true;
        result.matchPreJoinRequest_ = value;
        return this;
      }
      public Builder setMatchPreJoinRequest(com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest.Builder builderForValue) {
        result.hasMatchPreJoinRequest = true;
        result.matchPreJoinRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchPreJoinRequest(com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest value) {
        if (result.hasMatchPreJoinRequest() &&
            result.matchPreJoinRequest_ != com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest.getDefaultInstance()) {
          result.matchPreJoinRequest_ =
            com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest.newBuilder(result.matchPreJoinRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchPreJoinRequest_ = value;
        }
        result.hasMatchPreJoinRequest = true;
        return this;
      }
      public Builder clearMatchPreJoinRequest() {
        result.hasMatchPreJoinRequest = false;
        result.matchPreJoinRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchPreJoinRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.MatchJoinGameRequest MatchJoinGameRequest = 8;
      public boolean hasMatchJoinGameRequest() {
        return result.hasMatchJoinGameRequest();
      }
      public com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest getMatchJoinGameRequest() {
        return result.getMatchJoinGameRequest();
      }
      public Builder setMatchJoinGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchJoinGameRequest = true;
        result.matchJoinGameRequest_ = value;
        return this;
      }
      public Builder setMatchJoinGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest.Builder builderForValue) {
        result.hasMatchJoinGameRequest = true;
        result.matchJoinGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchJoinGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest value) {
        if (result.hasMatchJoinGameRequest() &&
            result.matchJoinGameRequest_ != com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest.getDefaultInstance()) {
          result.matchJoinGameRequest_ =
            com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest.newBuilder(result.matchJoinGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchJoinGameRequest_ = value;
        }
        result.hasMatchJoinGameRequest = true;
        return this;
      }
      public Builder clearMatchJoinGameRequest() {
        result.hasMatchJoinGameRequest = false;
        result.matchJoinGameRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchJoinGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.MatchCheckRoomRequest MatchCheckRoomRequest = 9;
      public boolean hasMatchCheckRoomRequest() {
        return result.hasMatchCheckRoomRequest();
      }
      public com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest getMatchCheckRoomRequest() {
        return result.getMatchCheckRoomRequest();
      }
      public Builder setMatchCheckRoomRequest(com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchCheckRoomRequest = true;
        result.matchCheckRoomRequest_ = value;
        return this;
      }
      public Builder setMatchCheckRoomRequest(com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest.Builder builderForValue) {
        result.hasMatchCheckRoomRequest = true;
        result.matchCheckRoomRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchCheckRoomRequest(com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest value) {
        if (result.hasMatchCheckRoomRequest() &&
            result.matchCheckRoomRequest_ != com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest.getDefaultInstance()) {
          result.matchCheckRoomRequest_ =
            com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest.newBuilder(result.matchCheckRoomRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchCheckRoomRequest_ = value;
        }
        result.hasMatchCheckRoomRequest = true;
        return this;
      }
      public Builder clearMatchCheckRoomRequest() {
        result.hasMatchCheckRoomRequest = false;
        result.matchCheckRoomRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchCheckRoomRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.MatchJoinInGameRequest MatchJoinInGameRequest = 10;
      public boolean hasMatchJoinInGameRequest() {
        return result.hasMatchJoinInGameRequest();
      }
      public com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest getMatchJoinInGameRequest() {
        return result.getMatchJoinInGameRequest();
      }
      public Builder setMatchJoinInGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchJoinInGameRequest = true;
        result.matchJoinInGameRequest_ = value;
        return this;
      }
      public Builder setMatchJoinInGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest.Builder builderForValue) {
        result.hasMatchJoinInGameRequest = true;
        result.matchJoinInGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchJoinInGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest value) {
        if (result.hasMatchJoinInGameRequest() &&
            result.matchJoinInGameRequest_ != com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest.getDefaultInstance()) {
          result.matchJoinInGameRequest_ =
            com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest.newBuilder(result.matchJoinInGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchJoinInGameRequest_ = value;
        }
        result.hasMatchJoinInGameRequest = true;
        return this;
      }
      public Builder clearMatchJoinInGameRequest() {
        result.hasMatchJoinInGameRequest = false;
        result.matchJoinInGameRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchJoinInGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.MatchExitGameRequest MatchExitGameRequest = 11;
      public boolean hasMatchExitGameRequest() {
        return result.hasMatchExitGameRequest();
      }
      public com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest getMatchExitGameRequest() {
        return result.getMatchExitGameRequest();
      }
      public Builder setMatchExitGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchExitGameRequest = true;
        result.matchExitGameRequest_ = value;
        return this;
      }
      public Builder setMatchExitGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest.Builder builderForValue) {
        result.hasMatchExitGameRequest = true;
        result.matchExitGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchExitGameRequest(com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest value) {
        if (result.hasMatchExitGameRequest() &&
            result.matchExitGameRequest_ != com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest.getDefaultInstance()) {
          result.matchExitGameRequest_ =
            com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest.newBuilder(result.matchExitGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchExitGameRequest_ = value;
        }
        result.hasMatchExitGameRequest = true;
        return this;
      }
      public Builder clearMatchExitGameRequest() {
        result.hasMatchExitGameRequest = false;
        result.matchExitGameRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchExitGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightReadyRequest FightReadyRequest = 12;
      public boolean hasFightReadyRequest() {
        return result.hasFightReadyRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest getFightReadyRequest() {
        return result.getFightReadyRequest();
      }
      public Builder setFightReadyRequest(com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightReadyRequest = true;
        result.fightReadyRequest_ = value;
        return this;
      }
      public Builder setFightReadyRequest(com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest.Builder builderForValue) {
        result.hasFightReadyRequest = true;
        result.fightReadyRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightReadyRequest(com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest value) {
        if (result.hasFightReadyRequest() &&
            result.fightReadyRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest.getDefaultInstance()) {
          result.fightReadyRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest.newBuilder(result.fightReadyRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightReadyRequest_ = value;
        }
        result.hasFightReadyRequest = true;
        return this;
      }
      public Builder clearFightReadyRequest() {
        result.hasFightReadyRequest = false;
        result.fightReadyRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightReadyRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightExitGameRequest FightExitGameRequest = 13;
      public boolean hasFightExitGameRequest() {
        return result.hasFightExitGameRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest getFightExitGameRequest() {
        return result.getFightExitGameRequest();
      }
      public Builder setFightExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightExitGameRequest = true;
        result.fightExitGameRequest_ = value;
        return this;
      }
      public Builder setFightExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest.Builder builderForValue) {
        result.hasFightExitGameRequest = true;
        result.fightExitGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest value) {
        if (result.hasFightExitGameRequest() &&
            result.fightExitGameRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest.getDefaultInstance()) {
          result.fightExitGameRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest.newBuilder(result.fightExitGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightExitGameRequest_ = value;
        }
        result.hasFightExitGameRequest = true;
        return this;
      }
      public Builder clearFightExitGameRequest() {
        result.hasFightExitGameRequest = false;
        result.fightExitGameRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightExitGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightApplyExitGameRequest FightApplyExitGameRequest = 14;
      public boolean hasFightApplyExitGameRequest() {
        return result.hasFightApplyExitGameRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest getFightApplyExitGameRequest() {
        return result.getFightApplyExitGameRequest();
      }
      public Builder setFightApplyExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightApplyExitGameRequest = true;
        result.fightApplyExitGameRequest_ = value;
        return this;
      }
      public Builder setFightApplyExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest.Builder builderForValue) {
        result.hasFightApplyExitGameRequest = true;
        result.fightApplyExitGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightApplyExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest value) {
        if (result.hasFightApplyExitGameRequest() &&
            result.fightApplyExitGameRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest.getDefaultInstance()) {
          result.fightApplyExitGameRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest.newBuilder(result.fightApplyExitGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightApplyExitGameRequest_ = value;
        }
        result.hasFightApplyExitGameRequest = true;
        return this;
      }
      public Builder clearFightApplyExitGameRequest() {
        result.hasFightApplyExitGameRequest = false;
        result.fightApplyExitGameRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightApplyExitGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightAgreeExitGameRequest FightAgreeExitGameRequest = 15;
      public boolean hasFightAgreeExitGameRequest() {
        return result.hasFightAgreeExitGameRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest getFightAgreeExitGameRequest() {
        return result.getFightAgreeExitGameRequest();
      }
      public Builder setFightAgreeExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightAgreeExitGameRequest = true;
        result.fightAgreeExitGameRequest_ = value;
        return this;
      }
      public Builder setFightAgreeExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest.Builder builderForValue) {
        result.hasFightAgreeExitGameRequest = true;
        result.fightAgreeExitGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightAgreeExitGameRequest(com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest value) {
        if (result.hasFightAgreeExitGameRequest() &&
            result.fightAgreeExitGameRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest.getDefaultInstance()) {
          result.fightAgreeExitGameRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest.newBuilder(result.fightAgreeExitGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightAgreeExitGameRequest_ = value;
        }
        result.hasFightAgreeExitGameRequest = true;
        return this;
      }
      public Builder clearFightAgreeExitGameRequest() {
        result.hasFightAgreeExitGameRequest = false;
        result.fightAgreeExitGameRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightAgreeExitGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightSendCardRequest FightSendCardRequest = 16;
      public boolean hasFightSendCardRequest() {
        return result.hasFightSendCardRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest getFightSendCardRequest() {
        return result.getFightSendCardRequest();
      }
      public Builder setFightSendCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightSendCardRequest = true;
        result.fightSendCardRequest_ = value;
        return this;
      }
      public Builder setFightSendCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest.Builder builderForValue) {
        result.hasFightSendCardRequest = true;
        result.fightSendCardRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightSendCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest value) {
        if (result.hasFightSendCardRequest() &&
            result.fightSendCardRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest.getDefaultInstance()) {
          result.fightSendCardRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest.newBuilder(result.fightSendCardRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightSendCardRequest_ = value;
        }
        result.hasFightSendCardRequest = true;
        return this;
      }
      public Builder clearFightSendCardRequest() {
        result.hasFightSendCardRequest = false;
        result.fightSendCardRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightSendCardRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightGetlastRoundRequest FightGetlastRoundRequest = 17;
      public boolean hasFightGetlastRoundRequest() {
        return result.hasFightGetlastRoundRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest getFightGetlastRoundRequest() {
        return result.getFightGetlastRoundRequest();
      }
      public Builder setFightGetlastRoundRequest(com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGetlastRoundRequest = true;
        result.fightGetlastRoundRequest_ = value;
        return this;
      }
      public Builder setFightGetlastRoundRequest(com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest.Builder builderForValue) {
        result.hasFightGetlastRoundRequest = true;
        result.fightGetlastRoundRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGetlastRoundRequest(com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest value) {
        if (result.hasFightGetlastRoundRequest() &&
            result.fightGetlastRoundRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest.getDefaultInstance()) {
          result.fightGetlastRoundRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest.newBuilder(result.fightGetlastRoundRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGetlastRoundRequest_ = value;
        }
        result.hasFightGetlastRoundRequest = true;
        return this;
      }
      public Builder clearFightGetlastRoundRequest() {
        result.hasFightGetlastRoundRequest = false;
        result.fightGetlastRoundRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGetlastRoundRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightGuoRequest FightGuoRequest = 18;
      public boolean hasFightGuoRequest() {
        return result.hasFightGuoRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest getFightGuoRequest() {
        return result.getFightGuoRequest();
      }
      public Builder setFightGuoRequest(com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGuoRequest = true;
        result.fightGuoRequest_ = value;
        return this;
      }
      public Builder setFightGuoRequest(com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest.Builder builderForValue) {
        result.hasFightGuoRequest = true;
        result.fightGuoRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGuoRequest(com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest value) {
        if (result.hasFightGuoRequest() &&
            result.fightGuoRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest.getDefaultInstance()) {
          result.fightGuoRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest.newBuilder(result.fightGuoRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGuoRequest_ = value;
        }
        result.hasFightGuoRequest = true;
        return this;
      }
      public Builder clearFightGuoRequest() {
        result.hasFightGuoRequest = false;
        result.fightGuoRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGuoRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightGenRequest FightGenRequest = 19;
      public boolean hasFightGenRequest() {
        return result.hasFightGenRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightGenRequest getFightGenRequest() {
        return result.getFightGenRequest();
      }
      public Builder setFightGenRequest(com.randioo.compare_collections_server.protocol.Fight.FightGenRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGenRequest = true;
        result.fightGenRequest_ = value;
        return this;
      }
      public Builder setFightGenRequest(com.randioo.compare_collections_server.protocol.Fight.FightGenRequest.Builder builderForValue) {
        result.hasFightGenRequest = true;
        result.fightGenRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGenRequest(com.randioo.compare_collections_server.protocol.Fight.FightGenRequest value) {
        if (result.hasFightGenRequest() &&
            result.fightGenRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightGenRequest.getDefaultInstance()) {
          result.fightGenRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightGenRequest.newBuilder(result.fightGenRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGenRequest_ = value;
        }
        result.hasFightGenRequest = true;
        return this;
      }
      public Builder clearFightGenRequest() {
        result.hasFightGenRequest = false;
        result.fightGenRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGenRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightBiggerRequest FightBiggerRequest = 20;
      public boolean hasFightBiggerRequest() {
        return result.hasFightBiggerRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest getFightBiggerRequest() {
        return result.getFightBiggerRequest();
      }
      public Builder setFightBiggerRequest(com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightBiggerRequest = true;
        result.fightBiggerRequest_ = value;
        return this;
      }
      public Builder setFightBiggerRequest(com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest.Builder builderForValue) {
        result.hasFightBiggerRequest = true;
        result.fightBiggerRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightBiggerRequest(com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest value) {
        if (result.hasFightBiggerRequest() &&
            result.fightBiggerRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest.getDefaultInstance()) {
          result.fightBiggerRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest.newBuilder(result.fightBiggerRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightBiggerRequest_ = value;
        }
        result.hasFightBiggerRequest = true;
        return this;
      }
      public Builder clearFightBiggerRequest() {
        result.hasFightBiggerRequest = false;
        result.fightBiggerRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightBiggerRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightGiveUpRequest FightGiveUpRequest = 21;
      public boolean hasFightGiveUpRequest() {
        return result.hasFightGiveUpRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest getFightGiveUpRequest() {
        return result.getFightGiveUpRequest();
      }
      public Builder setFightGiveUpRequest(com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGiveUpRequest = true;
        result.fightGiveUpRequest_ = value;
        return this;
      }
      public Builder setFightGiveUpRequest(com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest.Builder builderForValue) {
        result.hasFightGiveUpRequest = true;
        result.fightGiveUpRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGiveUpRequest(com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest value) {
        if (result.hasFightGiveUpRequest() &&
            result.fightGiveUpRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest.getDefaultInstance()) {
          result.fightGiveUpRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest.newBuilder(result.fightGiveUpRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGiveUpRequest_ = value;
        }
        result.hasFightGiveUpRequest = true;
        return this;
      }
      public Builder clearFightGiveUpRequest() {
        result.hasFightGiveUpRequest = false;
        result.fightGiveUpRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGiveUpRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightBetAllRequest FightBetAllRequest = 22;
      public boolean hasFightBetAllRequest() {
        return result.hasFightBetAllRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest getFightBetAllRequest() {
        return result.getFightBetAllRequest();
      }
      public Builder setFightBetAllRequest(com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightBetAllRequest = true;
        result.fightBetAllRequest_ = value;
        return this;
      }
      public Builder setFightBetAllRequest(com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest.Builder builderForValue) {
        result.hasFightBetAllRequest = true;
        result.fightBetAllRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightBetAllRequest(com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest value) {
        if (result.hasFightBetAllRequest() &&
            result.fightBetAllRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest.getDefaultInstance()) {
          result.fightBetAllRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest.newBuilder(result.fightBetAllRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightBetAllRequest_ = value;
        }
        result.hasFightBetAllRequest = true;
        return this;
      }
      public Builder clearFightBetAllRequest() {
        result.hasFightBetAllRequest = false;
        result.fightBetAllRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightBetAllRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightCutCardsRequest FightCutCardsRequest = 23;
      public boolean hasFightCutCardsRequest() {
        return result.hasFightCutCardsRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest getFightCutCardsRequest() {
        return result.getFightCutCardsRequest();
      }
      public Builder setFightCutCardsRequest(com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightCutCardsRequest = true;
        result.fightCutCardsRequest_ = value;
        return this;
      }
      public Builder setFightCutCardsRequest(com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest.Builder builderForValue) {
        result.hasFightCutCardsRequest = true;
        result.fightCutCardsRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightCutCardsRequest(com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest value) {
        if (result.hasFightCutCardsRequest() &&
            result.fightCutCardsRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest.getDefaultInstance()) {
          result.fightCutCardsRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest.newBuilder(result.fightCutCardsRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightCutCardsRequest_ = value;
        }
        result.hasFightCutCardsRequest = true;
        return this;
      }
      public Builder clearFightCutCardsRequest() {
        result.hasFightCutCardsRequest = false;
        result.fightCutCardsRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightCutCardsRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightQueryGameConfigRequest FightQueryGameConfigRequest = 24;
      public boolean hasFightQueryGameConfigRequest() {
        return result.hasFightQueryGameConfigRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest getFightQueryGameConfigRequest() {
        return result.getFightQueryGameConfigRequest();
      }
      public Builder setFightQueryGameConfigRequest(com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightQueryGameConfigRequest = true;
        result.fightQueryGameConfigRequest_ = value;
        return this;
      }
      public Builder setFightQueryGameConfigRequest(com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest.Builder builderForValue) {
        result.hasFightQueryGameConfigRequest = true;
        result.fightQueryGameConfigRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightQueryGameConfigRequest(com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest value) {
        if (result.hasFightQueryGameConfigRequest() &&
            result.fightQueryGameConfigRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest.getDefaultInstance()) {
          result.fightQueryGameConfigRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest.newBuilder(result.fightQueryGameConfigRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightQueryGameConfigRequest_ = value;
        }
        result.hasFightQueryGameConfigRequest = true;
        return this;
      }
      public Builder clearFightQueryGameConfigRequest() {
        result.hasFightQueryGameConfigRequest = false;
        result.fightQueryGameConfigRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightQueryGameConfigRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightClientDispatchRequest FightClientDispatchRequest = 25;
      public boolean hasFightClientDispatchRequest() {
        return result.hasFightClientDispatchRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest getFightClientDispatchRequest() {
        return result.getFightClientDispatchRequest();
      }
      public Builder setFightClientDispatchRequest(com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightClientDispatchRequest = true;
        result.fightClientDispatchRequest_ = value;
        return this;
      }
      public Builder setFightClientDispatchRequest(com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest.Builder builderForValue) {
        result.hasFightClientDispatchRequest = true;
        result.fightClientDispatchRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightClientDispatchRequest(com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest value) {
        if (result.hasFightClientDispatchRequest() &&
            result.fightClientDispatchRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest.getDefaultInstance()) {
          result.fightClientDispatchRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest.newBuilder(result.fightClientDispatchRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightClientDispatchRequest_ = value;
        }
        result.hasFightClientDispatchRequest = true;
        return this;
      }
      public Builder clearFightClientDispatchRequest() {
        result.hasFightClientDispatchRequest = false;
        result.fightClientDispatchRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightClientDispatchRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightClientTouchCardRequest FightClientTouchCardRequest = 26;
      public boolean hasFightClientTouchCardRequest() {
        return result.hasFightClientTouchCardRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest getFightClientTouchCardRequest() {
        return result.getFightClientTouchCardRequest();
      }
      public Builder setFightClientTouchCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightClientTouchCardRequest = true;
        result.fightClientTouchCardRequest_ = value;
        return this;
      }
      public Builder setFightClientTouchCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest.Builder builderForValue) {
        result.hasFightClientTouchCardRequest = true;
        result.fightClientTouchCardRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightClientTouchCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest value) {
        if (result.hasFightClientTouchCardRequest() &&
            result.fightClientTouchCardRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest.getDefaultInstance()) {
          result.fightClientTouchCardRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest.newBuilder(result.fightClientTouchCardRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightClientTouchCardRequest_ = value;
        }
        result.hasFightClientTouchCardRequest = true;
        return this;
      }
      public Builder clearFightClientTouchCardRequest() {
        result.hasFightClientTouchCardRequest = false;
        result.fightClientTouchCardRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightClientTouchCardRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightConfirmGameOverRequest FightConfirmGameOverRequest = 27;
      public boolean hasFightConfirmGameOverRequest() {
        return result.hasFightConfirmGameOverRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest getFightConfirmGameOverRequest() {
        return result.getFightConfirmGameOverRequest();
      }
      public Builder setFightConfirmGameOverRequest(com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightConfirmGameOverRequest = true;
        result.fightConfirmGameOverRequest_ = value;
        return this;
      }
      public Builder setFightConfirmGameOverRequest(com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest.Builder builderForValue) {
        result.hasFightConfirmGameOverRequest = true;
        result.fightConfirmGameOverRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightConfirmGameOverRequest(com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest value) {
        if (result.hasFightConfirmGameOverRequest() &&
            result.fightConfirmGameOverRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest.getDefaultInstance()) {
          result.fightConfirmGameOverRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest.newBuilder(result.fightConfirmGameOverRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightConfirmGameOverRequest_ = value;
        }
        result.hasFightConfirmGameOverRequest = true;
        return this;
      }
      public Builder clearFightConfirmGameOverRequest() {
        result.hasFightConfirmGameOverRequest = false;
        result.fightConfirmGameOverRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightConfirmGameOverRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightGameStartRequest FightGameStartRequest = 28;
      public boolean hasFightGameStartRequest() {
        return result.hasFightGameStartRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest getFightGameStartRequest() {
        return result.getFightGameStartRequest();
      }
      public Builder setFightGameStartRequest(com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGameStartRequest = true;
        result.fightGameStartRequest_ = value;
        return this;
      }
      public Builder setFightGameStartRequest(com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest.Builder builderForValue) {
        result.hasFightGameStartRequest = true;
        result.fightGameStartRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGameStartRequest(com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest value) {
        if (result.hasFightGameStartRequest() &&
            result.fightGameStartRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest.getDefaultInstance()) {
          result.fightGameStartRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest.newBuilder(result.fightGameStartRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGameStartRequest_ = value;
        }
        result.hasFightGameStartRequest = true;
        return this;
      }
      public Builder clearFightGameStartRequest() {
        result.hasFightGameStartRequest = false;
        result.fightGameStartRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGameStartRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightBetRequest FightBetRequest = 29;
      public boolean hasFightBetRequest() {
        return result.hasFightBetRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightBetRequest getFightBetRequest() {
        return result.getFightBetRequest();
      }
      public Builder setFightBetRequest(com.randioo.compare_collections_server.protocol.Fight.FightBetRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightBetRequest = true;
        result.fightBetRequest_ = value;
        return this;
      }
      public Builder setFightBetRequest(com.randioo.compare_collections_server.protocol.Fight.FightBetRequest.Builder builderForValue) {
        result.hasFightBetRequest = true;
        result.fightBetRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightBetRequest(com.randioo.compare_collections_server.protocol.Fight.FightBetRequest value) {
        if (result.hasFightBetRequest() &&
            result.fightBetRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightBetRequest.getDefaultInstance()) {
          result.fightBetRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightBetRequest.newBuilder(result.fightBetRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightBetRequest_ = value;
        }
        result.hasFightBetRequest = true;
        return this;
      }
      public Builder clearFightBetRequest() {
        result.hasFightBetRequest = false;
        result.fightBetRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightBetRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightChooseAddCardRequest FightChooseAddCardRequest = 30;
      public boolean hasFightChooseAddCardRequest() {
        return result.hasFightChooseAddCardRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest getFightChooseAddCardRequest() {
        return result.getFightChooseAddCardRequest();
      }
      public Builder setFightChooseAddCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightChooseAddCardRequest = true;
        result.fightChooseAddCardRequest_ = value;
        return this;
      }
      public Builder setFightChooseAddCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest.Builder builderForValue) {
        result.hasFightChooseAddCardRequest = true;
        result.fightChooseAddCardRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightChooseAddCardRequest(com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest value) {
        if (result.hasFightChooseAddCardRequest() &&
            result.fightChooseAddCardRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest.getDefaultInstance()) {
          result.fightChooseAddCardRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest.newBuilder(result.fightChooseAddCardRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightChooseAddCardRequest_ = value;
        }
        result.hasFightChooseAddCardRequest = true;
        return this;
      }
      public Builder clearFightChooseAddCardRequest() {
        result.hasFightChooseAddCardRequest = false;
        result.fightChooseAddCardRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightChooseAddCardRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightGetRoomDataRequest FightGetRoomDataRequest = 31;
      public boolean hasFightGetRoomDataRequest() {
        return result.hasFightGetRoomDataRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest getFightGetRoomDataRequest() {
        return result.getFightGetRoomDataRequest();
      }
      public Builder setFightGetRoomDataRequest(com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGetRoomDataRequest = true;
        result.fightGetRoomDataRequest_ = value;
        return this;
      }
      public Builder setFightGetRoomDataRequest(com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest.Builder builderForValue) {
        result.hasFightGetRoomDataRequest = true;
        result.fightGetRoomDataRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGetRoomDataRequest(com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest value) {
        if (result.hasFightGetRoomDataRequest() &&
            result.fightGetRoomDataRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest.getDefaultInstance()) {
          result.fightGetRoomDataRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest.newBuilder(result.fightGetRoomDataRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGetRoomDataRequest_ = value;
        }
        result.hasFightGetRoomDataRequest = true;
        return this;
      }
      public Builder clearFightGetRoomDataRequest() {
        result.hasFightGetRoomDataRequest = false;
        result.fightGetRoomDataRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightGetRoomDataRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightLookPaiRequest FightLookPaiRequest = 32;
      public boolean hasFightLookPaiRequest() {
        return result.hasFightLookPaiRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest getFightLookPaiRequest() {
        return result.getFightLookPaiRequest();
      }
      public Builder setFightLookPaiRequest(com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightLookPaiRequest = true;
        result.fightLookPaiRequest_ = value;
        return this;
      }
      public Builder setFightLookPaiRequest(com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest.Builder builderForValue) {
        result.hasFightLookPaiRequest = true;
        result.fightLookPaiRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightLookPaiRequest(com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest value) {
        if (result.hasFightLookPaiRequest() &&
            result.fightLookPaiRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest.getDefaultInstance()) {
          result.fightLookPaiRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest.newBuilder(result.fightLookPaiRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightLookPaiRequest_ = value;
        }
        result.hasFightLookPaiRequest = true;
        return this;
      }
      public Builder clearFightLookPaiRequest() {
        result.hasFightLookPaiRequest = false;
        result.fightLookPaiRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightLookPaiRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightTwoRequest FightTwoRequest = 33;
      public boolean hasFightTwoRequest() {
        return result.hasFightTwoRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest getFightTwoRequest() {
        return result.getFightTwoRequest();
      }
      public Builder setFightTwoRequest(com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightTwoRequest = true;
        result.fightTwoRequest_ = value;
        return this;
      }
      public Builder setFightTwoRequest(com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest.Builder builderForValue) {
        result.hasFightTwoRequest = true;
        result.fightTwoRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightTwoRequest(com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest value) {
        if (result.hasFightTwoRequest() &&
            result.fightTwoRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest.getDefaultInstance()) {
          result.fightTwoRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest.newBuilder(result.fightTwoRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightTwoRequest_ = value;
        }
        result.hasFightTwoRequest = true;
        return this;
      }
      public Builder clearFightTwoRequest() {
        result.hasFightTwoRequest = false;
        result.fightTwoRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightTwoRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.RaceJoinRaceRequest RaceJoinRaceRequest = 34;
      public boolean hasRaceJoinRaceRequest() {
        return result.hasRaceJoinRaceRequest();
      }
      public com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest getRaceJoinRaceRequest() {
        return result.getRaceJoinRaceRequest();
      }
      public Builder setRaceJoinRaceRequest(com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRaceJoinRaceRequest = true;
        result.raceJoinRaceRequest_ = value;
        return this;
      }
      public Builder setRaceJoinRaceRequest(com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest.Builder builderForValue) {
        result.hasRaceJoinRaceRequest = true;
        result.raceJoinRaceRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeRaceJoinRaceRequest(com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest value) {
        if (result.hasRaceJoinRaceRequest() &&
            result.raceJoinRaceRequest_ != com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest.getDefaultInstance()) {
          result.raceJoinRaceRequest_ =
            com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest.newBuilder(result.raceJoinRaceRequest_).mergeFrom(value).buildPartial();
        } else {
          result.raceJoinRaceRequest_ = value;
        }
        result.hasRaceJoinRaceRequest = true;
        return this;
      }
      public Builder clearRaceJoinRaceRequest() {
        result.hasRaceJoinRaceRequest = false;
        result.raceJoinRaceRequest_ = com.randioo.compare_collections_server.protocol.Race.RaceJoinRaceRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.RaceShowQueueRequest RaceShowQueueRequest = 35;
      public boolean hasRaceShowQueueRequest() {
        return result.hasRaceShowQueueRequest();
      }
      public com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest getRaceShowQueueRequest() {
        return result.getRaceShowQueueRequest();
      }
      public Builder setRaceShowQueueRequest(com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRaceShowQueueRequest = true;
        result.raceShowQueueRequest_ = value;
        return this;
      }
      public Builder setRaceShowQueueRequest(com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest.Builder builderForValue) {
        result.hasRaceShowQueueRequest = true;
        result.raceShowQueueRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeRaceShowQueueRequest(com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest value) {
        if (result.hasRaceShowQueueRequest() &&
            result.raceShowQueueRequest_ != com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest.getDefaultInstance()) {
          result.raceShowQueueRequest_ =
            com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest.newBuilder(result.raceShowQueueRequest_).mergeFrom(value).buildPartial();
        } else {
          result.raceShowQueueRequest_ = value;
        }
        result.hasRaceShowQueueRequest = true;
        return this;
      }
      public Builder clearRaceShowQueueRequest() {
        result.hasRaceShowQueueRequest = false;
        result.raceShowQueueRequest_ = com.randioo.compare_collections_server.protocol.Race.RaceShowQueueRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.GmEnvVarsRequest GmEnvVarsRequest = 36;
      public boolean hasGmEnvVarsRequest() {
        return result.hasGmEnvVarsRequest();
      }
      public com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest getGmEnvVarsRequest() {
        return result.getGmEnvVarsRequest();
      }
      public Builder setGmEnvVarsRequest(com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGmEnvVarsRequest = true;
        result.gmEnvVarsRequest_ = value;
        return this;
      }
      public Builder setGmEnvVarsRequest(com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest.Builder builderForValue) {
        result.hasGmEnvVarsRequest = true;
        result.gmEnvVarsRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeGmEnvVarsRequest(com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest value) {
        if (result.hasGmEnvVarsRequest() &&
            result.gmEnvVarsRequest_ != com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest.getDefaultInstance()) {
          result.gmEnvVarsRequest_ =
            com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest.newBuilder(result.gmEnvVarsRequest_).mergeFrom(value).buildPartial();
        } else {
          result.gmEnvVarsRequest_ = value;
        }
        result.hasGmEnvVarsRequest = true;
        return this;
      }
      public Builder clearGmEnvVarsRequest() {
        result.hasGmEnvVarsRequest = false;
        result.gmEnvVarsRequest_ = com.randioo.compare_collections_server.protocol.Gm.GmEnvVarsRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.GmGameInfoRequest GmGameInfoRequest = 37;
      public boolean hasGmGameInfoRequest() {
        return result.hasGmGameInfoRequest();
      }
      public com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest getGmGameInfoRequest() {
        return result.getGmGameInfoRequest();
      }
      public Builder setGmGameInfoRequest(com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGmGameInfoRequest = true;
        result.gmGameInfoRequest_ = value;
        return this;
      }
      public Builder setGmGameInfoRequest(com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest.Builder builderForValue) {
        result.hasGmGameInfoRequest = true;
        result.gmGameInfoRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeGmGameInfoRequest(com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest value) {
        if (result.hasGmGameInfoRequest() &&
            result.gmGameInfoRequest_ != com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest.getDefaultInstance()) {
          result.gmGameInfoRequest_ =
            com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest.newBuilder(result.gmGameInfoRequest_).mergeFrom(value).buildPartial();
        } else {
          result.gmGameInfoRequest_ = value;
        }
        result.hasGmGameInfoRequest = true;
        return this;
      }
      public Builder clearGmGameInfoRequest() {
        result.hasGmGameInfoRequest = false;
        result.gmGameInfoRequest_ = com.randioo.compare_collections_server.protocol.Gm.GmGameInfoRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.GmDispatchCardRequest GmDispatchCardRequest = 38;
      public boolean hasGmDispatchCardRequest() {
        return result.hasGmDispatchCardRequest();
      }
      public com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest getGmDispatchCardRequest() {
        return result.getGmDispatchCardRequest();
      }
      public Builder setGmDispatchCardRequest(com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGmDispatchCardRequest = true;
        result.gmDispatchCardRequest_ = value;
        return this;
      }
      public Builder setGmDispatchCardRequest(com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest.Builder builderForValue) {
        result.hasGmDispatchCardRequest = true;
        result.gmDispatchCardRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeGmDispatchCardRequest(com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest value) {
        if (result.hasGmDispatchCardRequest() &&
            result.gmDispatchCardRequest_ != com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest.getDefaultInstance()) {
          result.gmDispatchCardRequest_ =
            com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest.newBuilder(result.gmDispatchCardRequest_).mergeFrom(value).buildPartial();
        } else {
          result.gmDispatchCardRequest_ = value;
        }
        result.hasGmDispatchCardRequest = true;
        return this;
      }
      public Builder clearGmDispatchCardRequest() {
        result.hasGmDispatchCardRequest = false;
        result.gmDispatchCardRequest_ = com.randioo.compare_collections_server.protocol.Gm.GmDispatchCardRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.GmRoundRequest GmRoundRequest = 39;
      public boolean hasGmRoundRequest() {
        return result.hasGmRoundRequest();
      }
      public com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest getGmRoundRequest() {
        return result.getGmRoundRequest();
      }
      public Builder setGmRoundRequest(com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGmRoundRequest = true;
        result.gmRoundRequest_ = value;
        return this;
      }
      public Builder setGmRoundRequest(com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest.Builder builderForValue) {
        result.hasGmRoundRequest = true;
        result.gmRoundRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeGmRoundRequest(com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest value) {
        if (result.hasGmRoundRequest() &&
            result.gmRoundRequest_ != com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest.getDefaultInstance()) {
          result.gmRoundRequest_ =
            com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest.newBuilder(result.gmRoundRequest_).mergeFrom(value).buildPartial();
        } else {
          result.gmRoundRequest_ = value;
        }
        result.hasGmRoundRequest = true;
        return this;
      }
      public Builder clearGmRoundRequest() {
        result.hasGmRoundRequest = false;
        result.gmRoundRequest_ = com.randioo.compare_collections_server.protocol.Gm.GmRoundRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.FightReconnectDataRequest FightReconnectDataRequest = 40;
      public boolean hasFightReconnectDataRequest() {
        return result.hasFightReconnectDataRequest();
      }
      public com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest getFightReconnectDataRequest() {
        return result.getFightReconnectDataRequest();
      }
      public Builder setFightReconnectDataRequest(com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightReconnectDataRequest = true;
        result.fightReconnectDataRequest_ = value;
        return this;
      }
      public Builder setFightReconnectDataRequest(com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest.Builder builderForValue) {
        result.hasFightReconnectDataRequest = true;
        result.fightReconnectDataRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightReconnectDataRequest(com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest value) {
        if (result.hasFightReconnectDataRequest() &&
            result.fightReconnectDataRequest_ != com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest.getDefaultInstance()) {
          result.fightReconnectDataRequest_ =
            com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest.newBuilder(result.fightReconnectDataRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightReconnectDataRequest_ = value;
        }
        result.hasFightReconnectDataRequest = true;
        return this;
      }
      public Builder clearFightReconnectDataRequest() {
        result.hasFightReconnectDataRequest = false;
        result.fightReconnectDataRequest_ = com.randioo.compare_collections_server.protocol.Fight.FightReconnectDataRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.MatchRequest MatchRequest = 41;
      public boolean hasMatchRequest() {
        return result.hasMatchRequest();
      }
      public com.randioo.compare_collections_server.protocol.Match.MatchRequest getMatchRequest() {
        return result.getMatchRequest();
      }
      public Builder setMatchRequest(com.randioo.compare_collections_server.protocol.Match.MatchRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchRequest = true;
        result.matchRequest_ = value;
        return this;
      }
      public Builder setMatchRequest(com.randioo.compare_collections_server.protocol.Match.MatchRequest.Builder builderForValue) {
        result.hasMatchRequest = true;
        result.matchRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchRequest(com.randioo.compare_collections_server.protocol.Match.MatchRequest value) {
        if (result.hasMatchRequest() &&
            result.matchRequest_ != com.randioo.compare_collections_server.protocol.Match.MatchRequest.getDefaultInstance()) {
          result.matchRequest_ =
            com.randioo.compare_collections_server.protocol.Match.MatchRequest.newBuilder(result.matchRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchRequest_ = value;
        }
        result.hasMatchRequest = true;
        return this;
      }
      public Builder clearMatchRequest() {
        result.hasMatchRequest = false;
        result.matchRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.compare_collections_server.protocol.MatchCancelRequest MatchCancelRequest = 42;
      public boolean hasMatchCancelRequest() {
        return result.hasMatchCancelRequest();
      }
      public com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest getMatchCancelRequest() {
        return result.getMatchCancelRequest();
      }
      public Builder setMatchCancelRequest(com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchCancelRequest = true;
        result.matchCancelRequest_ = value;
        return this;
      }
      public Builder setMatchCancelRequest(com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest.Builder builderForValue) {
        result.hasMatchCancelRequest = true;
        result.matchCancelRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchCancelRequest(com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest value) {
        if (result.hasMatchCancelRequest() &&
            result.matchCancelRequest_ != com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest.getDefaultInstance()) {
          result.matchCancelRequest_ =
            com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest.newBuilder(result.matchCancelRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchCancelRequest_ = value;
        }
        result.hasMatchCancelRequest = true;
        return this;
      }
      public Builder clearMatchCancelRequest() {
        result.hasMatchCancelRequest = false;
        result.matchCancelRequest_ = com.randioo.compare_collections_server.protocol.Match.MatchCancelRequest.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.compare_collections_server.protocol.CS)
    }
    
    static {
      defaultInstance = new CS(true);
      com.randioo.compare_collections_server.protocol.ClientMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.compare_collections_server.protocol.CS)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_compare_collections_server_protocol_CS_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_compare_collections_server_protocol_CS_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023ClientMessage.proto\022/com.randioo.compa" +
      "re_collections_server.protocol\032\013Login.pr" +
      "oto\032\nRole.proto\032\013Match.proto\032\013Fight.prot" +
      "o\032\016Settings.proto\032\nRace.proto\032\013Heart.pro" +
      "to\032\010Gm.proto\"\374 \n\002CS\022S\n\014HeartRequest\030\001 \001(" +
      "\0132=.com.randioo.compare_collections_serv" +
      "er.protocol.HeartRequest\022I\n\007CSHeart\030\002 \001(" +
      "\01328.com.randioo.compare_collections_serv" +
      "er.protocol.CSHeart\022i\n\027LoginGetRoleDataR" +
      "equest\030\003 \001(\0132H.com.randioo.compare_colle",
      "ctions_server.protocol.LoginGetRoleDataR" +
      "equest\022]\n\021RoleRenameRequest\030\004 \001(\0132B.com." +
      "randioo.compare_collections_server.proto" +
      "col.RoleRenameRequest\022g\n\026RoleGetRoleData" +
      "Request\030\005 \001(\0132G.com.randioo.compare_coll" +
      "ections_server.protocol.RoleGetRoleDataR" +
      "equest\022g\n\026MatchCreateGameRequest\030\006 \001(\0132G" +
      ".com.randioo.compare_collections_server." +
      "protocol.MatchCreateGameRequest\022a\n\023Match" +
      "PreJoinRequest\030\007 \001(\0132D.com.randioo.compa",
      "re_collections_server.protocol.MatchPreJ" +
      "oinRequest\022c\n\024MatchJoinGameRequest\030\010 \001(\013" +
      "2E.com.randioo.compare_collections_serve" +
      "r.protocol.MatchJoinGameRequest\022e\n\025Match" +
      "CheckRoomRequest\030\t \001(\0132F.com.randioo.com" +
      "pare_collections_server.protocol.MatchCh" +
      "eckRoomRequest\022g\n\026MatchJoinInGameRequest" +
      "\030\n \001(\0132G.com.randioo.compare_collections" +
      "_server.protocol.MatchJoinInGameRequest\022" +
      "c\n\024MatchExitGameRequest\030\013 \001(\0132E.com.rand",
      "ioo.compare_collections_server.protocol." +
      "MatchExitGameRequest\022]\n\021FightReadyReques" +
      "t\030\014 \001(\0132B.com.randioo.compare_collection" +
      "s_server.protocol.FightReadyRequest\022c\n\024F" +
      "ightExitGameRequest\030\r \001(\0132E.com.randioo." +
      "compare_collections_server.protocol.Figh" +
      "tExitGameRequest\022m\n\031FightApplyExitGameRe" +
      "quest\030\016 \001(\0132J.com.randioo.compare_collec" +
      "tions_server.protocol.FightApplyExitGame" +
      "Request\022m\n\031FightAgreeExitGameRequest\030\017 \001",
      "(\0132J.com.randioo.compare_collections_ser" +
      "ver.protocol.FightAgreeExitGameRequest\022c" +
      "\n\024FightSendCardRequest\030\020 \001(\0132E.com.randi" +
      "oo.compare_collections_server.protocol.F" +
      "ightSendCardRequest\022k\n\030FightGetlastRound" +
      "Request\030\021 \001(\0132I.com.randioo.compare_coll" +
      "ections_server.protocol.FightGetlastRoun" +
      "dRequest\022Y\n\017FightGuoRequest\030\022 \001(\0132@.com." +
      "randioo.compare_collections_server.proto" +
      "col.FightGuoRequest\022Y\n\017FightGenRequest\030\023",
      " \001(\0132@.com.randioo.compare_collections_s" +
      "erver.protocol.FightGenRequest\022_\n\022FightB" +
      "iggerRequest\030\024 \001(\0132C.com.randioo.compare" +
      "_collections_server.protocol.FightBigger" +
      "Request\022_\n\022FightGiveUpRequest\030\025 \001(\0132C.co" +
      "m.randioo.compare_collections_server.pro" +
      "tocol.FightGiveUpRequest\022_\n\022FightBetAllR" +
      "equest\030\026 \001(\0132C.com.randioo.compare_colle" +
      "ctions_server.protocol.FightBetAllReques" +
      "t\022c\n\024FightCutCardsRequest\030\027 \001(\0132E.com.ra",
      "ndioo.compare_collections_server.protoco" +
      "l.FightCutCardsRequest\022q\n\033FightQueryGame" +
      "ConfigRequest\030\030 \001(\0132L.com.randioo.compar" +
      "e_collections_server.protocol.FightQuery" +
      "GameConfigRequest\022o\n\032FightClientDispatch" +
      "Request\030\031 \001(\0132K.com.randioo.compare_coll" +
      "ections_server.protocol.FightClientDispa" +
      "tchRequest\022q\n\033FightClientTouchCardReques" +
      "t\030\032 \001(\0132L.com.randioo.compare_collection" +
      "s_server.protocol.FightClientTouchCardRe",
      "quest\022q\n\033FightConfirmGameOverRequest\030\033 \001" +
      "(\0132L.com.randioo.compare_collections_ser" +
      "ver.protocol.FightConfirmGameOverRequest" +
      "\022e\n\025FightGameStartRequest\030\034 \001(\0132F.com.ra" +
      "ndioo.compare_collections_server.protoco" +
      "l.FightGameStartRequest\022Y\n\017FightBetReque" +
      "st\030\035 \001(\0132@.com.randioo.compare_collectio" +
      "ns_server.protocol.FightBetRequest\022m\n\031Fi" +
      "ghtChooseAddCardRequest\030\036 \001(\0132J.com.rand" +
      "ioo.compare_collections_server.protocol.",
      "FightChooseAddCardRequest\022i\n\027FightGetRoo" +
      "mDataRequest\030\037 \001(\0132H.com.randioo.compare" +
      "_collections_server.protocol.FightGetRoo" +
      "mDataRequest\022a\n\023FightLookPaiRequest\030  \001(" +
      "\0132D.com.randioo.compare_collections_serv" +
      "er.protocol.FightLookPaiRequest\022Y\n\017Fight" +
      "TwoRequest\030! \001(\0132@.com.randioo.compare_c" +
      "ollections_server.protocol.FightTwoReque" +
      "st\022a\n\023RaceJoinRaceRequest\030\" \001(\0132D.com.ra" +
      "ndioo.compare_collections_server.protoco",
      "l.RaceJoinRaceRequest\022c\n\024RaceShowQueueRe" +
      "quest\030# \001(\0132E.com.randioo.compare_collec" +
      "tions_server.protocol.RaceShowQueueReque" +
      "st\022[\n\020GmEnvVarsRequest\030$ \001(\0132A.com.randi" +
      "oo.compare_collections_server.protocol.G" +
      "mEnvVarsRequest\022]\n\021GmGameInfoRequest\030% \001" +
      "(\0132B.com.randioo.compare_collections_ser" +
      "ver.protocol.GmGameInfoRequest\022e\n\025GmDisp" +
      "atchCardRequest\030& \001(\0132F.com.randioo.comp" +
      "are_collections_server.protocol.GmDispat",
      "chCardRequest\022W\n\016GmRoundRequest\030\' \001(\0132?." +
      "com.randioo.compare_collections_server.p" +
      "rotocol.GmRoundRequest\022m\n\031FightReconnect" +
      "DataRequest\030( \001(\0132J.com.randioo.compare_" +
      "collections_server.protocol.FightReconne" +
      "ctDataRequest\022S\n\014MatchRequest\030) \001(\0132=.co" +
      "m.randioo.compare_collections_server.pro" +
      "tocol.MatchRequest\022_\n\022MatchCancelRequest" +
      "\030* \001(\0132C.com.randioo.compare_collections" +
      "_server.protocol.MatchCancelRequest"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_randioo_compare_collections_server_protocol_CS_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_randioo_compare_collections_server_protocol_CS_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_compare_collections_server_protocol_CS_descriptor,
              new java.lang.String[] { "HeartRequest", "CSHeart", "LoginGetRoleDataRequest", "RoleRenameRequest", "RoleGetRoleDataRequest", "MatchCreateGameRequest", "MatchPreJoinRequest", "MatchJoinGameRequest", "MatchCheckRoomRequest", "MatchJoinInGameRequest", "MatchExitGameRequest", "FightReadyRequest", "FightExitGameRequest", "FightApplyExitGameRequest", "FightAgreeExitGameRequest", "FightSendCardRequest", "FightGetlastRoundRequest", "FightGuoRequest", "FightGenRequest", "FightBiggerRequest", "FightGiveUpRequest", "FightBetAllRequest", "FightCutCardsRequest", "FightQueryGameConfigRequest", "FightClientDispatchRequest", "FightClientTouchCardRequest", "FightConfirmGameOverRequest", "FightGameStartRequest", "FightBetRequest", "FightChooseAddCardRequest", "FightGetRoomDataRequest", "FightLookPaiRequest", "FightTwoRequest", "RaceJoinRaceRequest", "RaceShowQueueRequest", "GmEnvVarsRequest", "GmGameInfoRequest", "GmDispatchCardRequest", "GmRoundRequest", "FightReconnectDataRequest", "MatchRequest", "MatchCancelRequest", },
              com.randioo.compare_collections_server.protocol.ClientMessage.CS.class,
              com.randioo.compare_collections_server.protocol.ClientMessage.CS.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.randioo.compare_collections_server.protocol.Login.getDescriptor(),
          com.randioo.compare_collections_server.protocol.Role.getDescriptor(),
          com.randioo.compare_collections_server.protocol.Match.getDescriptor(),
          com.randioo.compare_collections_server.protocol.Fight.getDescriptor(),
          com.randioo.compare_collections_server.protocol.Settings.getDescriptor(),
          com.randioo.compare_collections_server.protocol.Race.getDescriptor(),
          com.randioo.compare_collections_server.protocol.Heart.getDescriptor(),
          com.randioo.compare_collections_server.protocol.Gm.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
